Main code structure:

1. when powered for the first time, the mbed resets. The current time and date will be read from the RTC and written to the 'day' and 'time' variables

2. Every day, a new folder is created for the current day aswell as new file on the SD card

3. Data is read from the sensors and written periodically to the file until we reach the end of the day

4. Repeat 3 until day_is_over = true 

5. After exiting the main loop where file is updated, we're now going  to upload data to the server . We must first read the updated file this time and write its content to another buffer in a simple format which is made up of the exact number of values for each type of record 
(e.g 3.2 2.4 6.3 4.1 5.2 3.4 6.0 2.1 ...) are 2 instances for 4 sensor values.

6. We call the function "send_data" to upload the formatted data by a means of a HTTP post request. The modem should only be connected during that time.

7. We're done for the day we now return to step 2 and repeat this over and over...


// problems :

For some reason the mbed behaves incorrectly when using multiple peripherals in the same program. It looks like  the SD card corrupts the data space used by the Vodafone Modem or vice-versa. The point is when  we're ready to upload data , only the VodafoneModem system should exist. One solution was to dynamically allocated data for the SDFileSystem only to write to a file during the day then delete it just before uploading data. But this didn't work so smoothly.

 Another approach was to divide the program into two thread functions : one which handles writing  data to a file and the other which handles uploading the data to a server. These functions should be scheduled differently and should help us manage the memory and processing requirements of the USB modem aswell as the SD card.

 mbed RAM is 32 kb perhaps one of the two systems is exceeding the  allowed data storage which leads to some sort of stack overflow.  

The problem remains unclear...


